<div>
  <div class="inputs">
    <p>
      <?php echo $this->translate('Add custom CSS for sites.'); ?><br/>
      <?php echo $this->translate("Note: CSS rules defined for 'Default' will only be used if no CSS is defined for a specific site in this module."); ?><br/>
      <?php echo $this->translate('Warning: the following tags cannot be used in selectors:'); ?>
      <b>body, head, html</b>.<br/>
      <?php echo sprintf($this->translate('For instance, if you define a rule like %s, it will be removed when submitting your changes.'), '<code>body {color: red;}</code>'); ?>
    </p>
    <div id="csseditor_site">
      <?php
        echo $this->siteSelect('site', [
            'empty_option' => $this->translate('Default'),
        ]);
      ?>
    </div>
    <div>
      <?php echo $this->formTextarea($textarea); ?>
    </div>

  </div>
<br/><br/>
<a class="button" id="save">Save</a>
<a class="button" id="restore">Restore</a>

</span>

</div>

<script>
    (function() {
        var prev_data= $('#csseditor_cssvalue').val();
        var prev_site_id=$('#csseditor_site select').val();

        function saveCss() {
            var site_id = $('#csseditor_site select').val();
            saveCssForSite(site_id,true);
        }

        function restoreCss() {
            var site_id = $('#csseditor_site select').val();
            if (confirm("<?php echo $this->translate('Do you want to cancel your modifications ?') ?>") == true) {
                 updateCssForSite(site_id, true);

            }
        }

        function getBrowseCssUrl(site_id) {
            var base_url = '<?php echo $this->url('admin/csseditor'); ?>';
            var url = base_url;
            if (site_id > 0) {
                return base_url + '/' + site_id;
            }
            return url;
        }

        function updateCssForSite(site_id, display_popup_confirm=false) {
            $.ajax({
                'url' : getBrowseCssUrl(site_id),
                'type': 'get',
                'success': function(data) {
                    $('#csseditor_cssvalue').val(data);
                    prev_data=data;
                    prev_site_id=site_id;
                }
            });
        }

        function saveCssForSite(site_id, display_popup_confirm=false) {
            var current_val = $('#csseditor_cssvalue').val();

            $.post(getBrowseCssUrl(site_id), {
                'css': current_val,
                'site' : prev_site_id
            })
            .fail(function(data) {
                alert(data.responseText);
                $('#csseditor_site select').val(prev_site_id);
            })
            .done(function(data) {
                $('#csseditor_cssvalue').val(data);
                prev_data=data;
                prev_site_id=site_id;
                if (display_popup_confirm) {
                    alert('Css has been saved');
                }
            });
        }

        $(document).ready(function() {
            $("#csseditor_site select").change(function() {
                var site_id = $(this).val();
                var current_val=$('#csseditor_cssvalue').val();

                if (prev_data != current_val) {
                    if (confirm("<?php echo $this->translate('This will save your modifications and switch.') ?>") == true) {
                        saveCssForSite(site_id);
                    } else {
                        $('#csseditor_site select').val(prev_site_id);
                    }
                } else {
                    updateCssForSite(site_id);
                }
            });

            $('#save').on('click', function(e) {
                e.preventDefault();
                saveCss();
            });
            $('#restore').on('click', function(e) {
                e.preventDefault();
                restoreCss();
            });
        });
    })();
</script>
